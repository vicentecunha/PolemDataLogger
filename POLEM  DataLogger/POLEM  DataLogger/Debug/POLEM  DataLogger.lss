
POLEM  DataLogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800100  00800100  00000344  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000090  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004bd  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016a  00000000  00000000  000008c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000201  00000000  00000000  00000a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000168  00000000  00000000  00000c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027e  00000000  00000000  00000d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002d4  00000000  00000000  00001012  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000080  00000000  00000000  000012e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4c 01 	call	0x298	; 0x298 <main>
  88:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <pluviometerInit>:
//	Resources: external interrupt 0 (INT0)
//-----------------------------------------------------------------------------
void pluviometerInit()
{
	// PD2 is input with pull-up.
	DDRD  &= ~(1 << DDD2);
  90:	52 98       	cbi	0x0a, 2	; 10
	PORTD |=  (1 << PORTD2);
  92:	5a 9a       	sbi	0x0b, 2	; 11
	MCUCR &= ~(1 << PUD);
  94:	85 b7       	in	r24, 0x35	; 53
  96:	8f 7e       	andi	r24, 0xEF	; 239
  98:	85 bf       	out	0x35, r24	; 53
	
	// The falling edge of INT0 generates an interrupt request.
	EICRA |=  (1 << ISC01);
  9a:	e9 e6       	ldi	r30, 0x69	; 105
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	80 83       	st	Z, r24
	EICRA &= ~(1 << ISC00);
  a4:	80 81       	ld	r24, Z
  a6:	8e 7f       	andi	r24, 0xFE	; 254
  a8:	80 83       	st	Z, r24
	
	// External Interrupt Request 0 Enable.
	EIMSK |= (1 << INT0);
  aa:	e8 9a       	sbi	0x1d, 0	; 29
  ac:	08 95       	ret

000000ae <__vector_1>:
}
//-----------------------------------------------------------------------------
// Interrupt Handlers
//-----------------------------------------------------------------------------
ISR(INT0_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	4f 93       	push	r20
  be:	5f 93       	push	r21
  c0:	6f 93       	push	r22
  c2:	7f 93       	push	r23
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	af 93       	push	r26
	pluviometerCounter++;
  ca:	20 91 04 01 	lds	r18, 0x0104
  ce:	30 91 05 01 	lds	r19, 0x0105
  d2:	40 91 06 01 	lds	r20, 0x0106
  d6:	50 91 07 01 	lds	r21, 0x0107
  da:	60 91 08 01 	lds	r22, 0x0108
  de:	70 91 09 01 	lds	r23, 0x0109
  e2:	80 91 0a 01 	lds	r24, 0x010A
  e6:	90 91 0b 01 	lds	r25, 0x010B
  ea:	a1 e0       	ldi	r26, 0x01	; 1
  ec:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <__adddi3_s8>
  f0:	20 93 04 01 	sts	0x0104, r18
  f4:	30 93 05 01 	sts	0x0105, r19
  f8:	40 93 06 01 	sts	0x0106, r20
  fc:	50 93 07 01 	sts	0x0107, r21
 100:	60 93 08 01 	sts	0x0108, r22
 104:	70 93 09 01 	sts	0x0109, r23
 108:	80 93 0a 01 	sts	0x010A, r24
 10c:	90 93 0b 01 	sts	0x010B, r25
}
 110:	af 91       	pop	r26
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	7f 91       	pop	r23
 118:	6f 91       	pop	r22
 11a:	5f 91       	pop	r21
 11c:	4f 91       	pop	r20
 11e:	3f 91       	pop	r19
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <tensiometerInit>:
//	Resources: Analog-to-Digital Converter
//-----------------------------------------------------------------------------
void tensiometerInit()
{
	// Internal 1.1V Voltage Reference with external capacitor at AREF pin.
	ADMUX |= (1 << REFS1)|(1 << REFS0);
 12c:	ec e7       	ldi	r30, 0x7C	; 124
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 6c       	ori	r24, 0xC0	; 192
 134:	80 83       	st	Z, r24
	
	// // ADC Conversion Result is right adjusted. Select channel input ADC0.
	ADMUX &= ~((1 << ADLAR)|(1 << MUX3)|(1 << MUX2)|(1 << MUX1)|(1 << MUX0));
 136:	80 81       	ld	r24, Z
 138:	80 7d       	andi	r24, 0xD0	; 208
 13a:	80 83       	st	Z, r24
	
	// ADC Prescaler of 128. ADC Enable. ADC Conversion Complete Interrupt Enable.
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0)|(1 << ADEN)|(1 << ADIE);
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	8f 68       	ori	r24, 0x8F	; 143
 144:	80 83       	st	Z, r24
	
	// Digital Input Disable.
	DIDR0 |= (1<< ADC5D)|(1<< ADC4D)|(1<< ADC3D)|(1<< ADC2D)|(1<< ADC1D)|(1<< ADC0D);
 146:	ee e7       	ldi	r30, 0x7E	; 126
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	8f 63       	ori	r24, 0x3F	; 63
 14e:	80 83       	st	Z, r24
 150:	08 95       	ret

00000152 <__vector_21>:
}
//-----------------------------------------------------------------------------
// Interrupt Handlers
//-----------------------------------------------------------------------------
ISR(ADC_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
	tensiometerMeasure = (ADCH << 8) + ADCL;
 162:	80 91 79 00 	lds	r24, 0x0079
 166:	20 91 78 00 	lds	r18, 0x0078
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	98 2f       	mov	r25, r24
 16e:	88 27       	eor	r24, r24
 170:	82 0f       	add	r24, r18
 172:	91 1d       	adc	r25, r1
 174:	90 93 03 01 	sts	0x0103, r25
 178:	80 93 02 01 	sts	0x0102, r24
	conversionComplete = 1;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 01 01 	sts	0x0101, r24
}
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <debugLedsInit>:
// Resources: IO pins 3 and 4
//-----------------------------------------------------------------------------
void debugLedsInit()
{
	// Setting pins as output
	DDRD  |= (1 << DDD4)|(1 << DDD3);
 192:	8a b1       	in	r24, 0x0a	; 10
 194:	88 61       	ori	r24, 0x18	; 24
 196:	8a b9       	out	0x0a, r24	; 10
	
	// Initial state: turned off
	PORTD |= (1 << PORTD4)|(1 << PORTD3);
 198:	8b b1       	in	r24, 0x0b	; 11
 19a:	88 61       	ori	r24, 0x18	; 24
 19c:	8b b9       	out	0x0b, r24	; 11
 19e:	08 95       	ret

000001a0 <spiTransfer>:
//-----------------------------------------------------------------------------
// Send byte to MOSI line, wait transmission, and return received byte by MISO
//-----------------------------------------------------------------------------
uint8_t spiTransfer(uint8_t byte)
{
	spiTransferComplete = 0;
 1a0:	10 92 00 01 	sts	0x0100, r1
	SPDR = byte;
 1a4:	8e bd       	out	0x2e, r24	; 46
	while(!spiTransferComplete);
 1a6:	80 91 00 01 	lds	r24, 0x0100
 1aa:	81 11       	cpse	r24, r1
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <spiTransfer+0x10>
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <spiTransfer+0xe>
	return SPDR;
 1b0:	8e b5       	in	r24, 0x2e	; 46
}
 1b2:	08 95       	ret

000001b4 <SDCardInit>:
//	Resources: SPI - Serial Peripheral Interface
//-----------------------------------------------------------------------------
void SDCardInit()
{
	// The MSB of the data word is transmitted first. SPI mode 0.
	SPCR &= ~((1 << DORD)|(1 << CPOL)|(1 << CPHA));
 1b4:	8c b5       	in	r24, 0x2c	; 44
 1b6:	83 7d       	andi	r24, 0xD3	; 211
 1b8:	8c bd       	out	0x2c, r24	; 44
	
	// Master SPI mode.
	SPCR |= (1 << MSTR);
 1ba:	8c b5       	in	r24, 0x2c	; 44
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	8c bd       	out	0x2c, r24	; 44
	
	// CLock rate of 250 Hz (prescaler of 64).
	SPSR &= ~(1 << SPI2X);
 1c0:	8d b5       	in	r24, 0x2d	; 45
 1c2:	8e 7f       	andi	r24, 0xFE	; 254
 1c4:	8d bd       	out	0x2d, r24	; 45
	SPCR |=  (1 << SPR1);
 1c6:	8c b5       	in	r24, 0x2c	; 44
 1c8:	82 60       	ori	r24, 0x02	; 2
 1ca:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~(1 << SPR0);
 1cc:	8c b5       	in	r24, 0x2c	; 44
 1ce:	8e 7f       	andi	r24, 0xFE	; 254
 1d0:	8c bd       	out	0x2c, r24	; 44
	
	// Pin configurations.
	DDRB |= (1<<DDB2)|(1<<DDB3)|(1<<DDB5);
 1d2:	84 b1       	in	r24, 0x04	; 4
 1d4:	8c 62       	ori	r24, 0x2C	; 44
 1d6:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << DDB4);
 1d8:	24 98       	cbi	0x04, 4	; 4
	
	// SPI Interrupt Enable. SPI Enable.
	SPCR |= (1 << SPIE)|(1 << SPE);
 1da:	8c b5       	in	r24, 0x2c	; 44
 1dc:	80 6c       	ori	r24, 0xC0	; 192
 1de:	8c bd       	out	0x2c, r24	; 44
	
	// Power on to native SD.
	PORTB |= (1 << PORTB2);
 1e0:	2a 9a       	sbi	0x05, 2	; 5
 1e2:	8a e0       	ldi	r24, 0x0A	; 10
	for(uint8_t k=0; k < 10; k++)
		SPDR = 0xFF;
 1e4:	9f ef       	ldi	r25, 0xFF	; 255
 1e6:	9e bd       	out	0x2e, r25	; 46
 1e8:	81 50       	subi	r24, 0x01	; 1
	// SPI Interrupt Enable. SPI Enable.
	SPCR |= (1 << SPIE)|(1 << SPE);
	
	// Power on to native SD.
	PORTB |= (1 << PORTB2);
	for(uint8_t k=0; k < 10; k++)
 1ea:	e9 f7       	brne	.-6      	; 0x1e6 <SDCardInit+0x32>
	
	// Software reset (CMD0).
	uint8_t R1 = 0;
	while(!R1)
	{
		PORTB &= ~(1 << PORTB2);
 1ec:	2a 98       	cbi	0x05, 2	; 5
		
		spiTransfer(0x40);
 1ee:	80 e4       	ldi	r24, 0x40	; 64
 1f0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <spiTransfer>
		for(uint8_t k = 0; k < 4; k++)
			spiTransfer(0x00);
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <spiTransfer>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <spiTransfer>
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <spiTransfer>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <spiTransfer>
		spiTransfer(0x95);		
 20c:	85 e9       	ldi	r24, 0x95	; 149
 20e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <spiTransfer>
		R1 = spiTransfer(0xFF);
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <spiTransfer>
		
		PORTB |= (1 << PORTB2);
 218:	2a 9a       	sbi	0x05, 2	; 5
	for(uint8_t k=0; k < 10; k++)
		SPDR = 0xFF;
	
	// Software reset (CMD0).
	uint8_t R1 = 0;
	while(!R1)
 21a:	88 23       	and	r24, r24
 21c:	39 f3       	breq	.-50     	; 0x1ec <SDCardInit+0x38>
	}
	
	// Initialization process (CMD1).
	while(R1)
	{
		PORTB &= ~(1 << PORTB2);
 21e:	2a 98       	cbi	0x05, 2	; 5
		
		spiTransfer(0x40 + 0x01);
 220:	81 e4       	ldi	r24, 0x41	; 65
 222:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <spiTransfer>
		for(uint8_t k = 0; k < 4; k++)
			spiTransfer(0x00);
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <spiTransfer>
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <spiTransfer>
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <spiTransfer>
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <spiTransfer>
		spiTransfer(0x01);
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <spiTransfer>
		R1 = spiTransfer(0xFF);
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <spiTransfer>
		
		PORTB |= (1 << PORTB2);
 24a:	2a 9a       	sbi	0x05, 2	; 5
		
		PORTB |= (1 << PORTB2);
	}
	
	// Initialization process (CMD1).
	while(R1)
 24c:	81 11       	cpse	r24, r1
 24e:	e7 cf       	rjmp	.-50     	; 0x21e <SDCardInit+0x6a>
		
		PORTB |= (1 << PORTB2);
	}
	
	// Maximize SPI clock speed (8 MHz, prescaler of 2).
	SPSR |= (1 << SPI2X);
 250:	8d b5       	in	r24, 0x2d	; 45
 252:	81 60       	ori	r24, 0x01	; 1
 254:	8d bd       	out	0x2d, r24	; 45
	SPCR &= ~((1 << SPR1)|(1 << SPR0));
 256:	8c b5       	in	r24, 0x2c	; 44
 258:	8c 7f       	andi	r24, 0xFC	; 252
 25a:	8c bd       	out	0x2c, r24	; 44
 25c:	08 95       	ret

0000025e <__vector_17>:
}
//-----------------------------------------------------------------------------
// Interrupt Handlers
//-----------------------------------------------------------------------------
ISR(SPI_STC_vect)
{
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	8f 93       	push	r24
	spiTransferComplete = 1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 00 01 	sts	0x0100, r24
}
 270:	8f 91       	pop	r24
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <sleepInit>:
//	Resources: Timer 1
//-----------------------------------------------------------------------------
void sleepInit()
{
	// Normal port operation, OC1A/OC1B disconnected.
	TCCR1A &= ~((1 << COM1A1)|(1 << COM1A0)|(1 << COM1B0)|(1 << COM1B0));
 27c:	e0 e8       	ldi	r30, 0x80	; 128
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	8f 72       	andi	r24, 0x2F	; 47
 284:	80 83       	st	Z, r24
	
	// Normal mode (counter)
	TCCR1B &= ~((1 << WGM13)|(1 << WGM12));
 286:	a1 e8       	ldi	r26, 0x81	; 129
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	8c 91       	ld	r24, X
 28c:	87 7e       	andi	r24, 0xE7	; 231
 28e:	8c 93       	st	X, r24
	TCCR1A &= ~((1 << WGM11)|(1 << WGM10));
 290:	80 81       	ld	r24, Z
 292:	8c 7f       	andi	r24, 0xFC	; 252
 294:	80 83       	st	Z, r24
 296:	08 95       	ret

00000298 <main>:

/* Main */
int main()
{
	// Initialization
	pluviometerInit();
 298:	0e 94 48 00 	call	0x90	; 0x90 <pluviometerInit>
	tensiometerInit();
 29c:	0e 94 96 00 	call	0x12c	; 0x12c <tensiometerInit>
	debugLedsInit();
 2a0:	0e 94 c9 00 	call	0x192	; 0x192 <debugLedsInit>
	SDCardInit();
 2a4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SDCardInit>
	sleepInit();
 2a8:	0e 94 3e 01 	call	0x27c	; 0x27c <sleepInit>
	sei();
 2ac:	78 94       	sei
	
	
	
	return 0;
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	08 95       	ret

000002b4 <__adddi3_s8>:
 2b4:	00 24       	eor	r0, r0
 2b6:	a7 fd       	sbrc	r26, 7
 2b8:	00 94       	com	r0
 2ba:	2a 0f       	add	r18, r26
 2bc:	30 1d       	adc	r19, r0
 2be:	40 1d       	adc	r20, r0
 2c0:	50 1d       	adc	r21, r0
 2c2:	60 1d       	adc	r22, r0
 2c4:	70 1d       	adc	r23, r0
 2c6:	80 1d       	adc	r24, r0
 2c8:	90 1d       	adc	r25, r0
 2ca:	08 95       	ret

000002cc <_exit>:
 2cc:	f8 94       	cli

000002ce <__stop_program>:
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <__stop_program>
